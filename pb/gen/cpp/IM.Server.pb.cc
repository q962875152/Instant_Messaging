// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Server.proto

#include "IM.Server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace IM {
namespace Server {
constexpr IMStopReceivePacket::IMStopReceivePacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct IMStopReceivePacketDefaultTypeInternal {
  constexpr IMStopReceivePacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMStopReceivePacketDefaultTypeInternal() {}
  union {
    IMStopReceivePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMStopReceivePacketDefaultTypeInternal _IMStopReceivePacket_default_instance_;
constexpr IMValidateReq::IMValidateReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IMValidateReqDefaultTypeInternal {
  constexpr IMValidateReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMValidateReqDefaultTypeInternal() {}
  union {
    IMValidateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMValidateReqDefaultTypeInternal _IMValidateReq_default_instance_;
constexpr IMValidateRsp::IMValidateRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_info_(nullptr)
  , result_code_(0u){}
struct IMValidateRspDefaultTypeInternal {
  constexpr IMValidateRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMValidateRspDefaultTypeInternal() {}
  union {
    IMValidateRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMValidateRspDefaultTypeInternal _IMValidateRsp_default_instance_;
constexpr IMGetDeviceTokenReq::IMGetDeviceTokenReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_()
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IMGetDeviceTokenReqDefaultTypeInternal {
  constexpr IMGetDeviceTokenReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetDeviceTokenReqDefaultTypeInternal() {}
  union {
    IMGetDeviceTokenReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetDeviceTokenReqDefaultTypeInternal _IMGetDeviceTokenReq_default_instance_;
constexpr IMGetDeviceTokenRsp::IMGetDeviceTokenRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_token_info_()
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IMGetDeviceTokenRspDefaultTypeInternal {
  constexpr IMGetDeviceTokenRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetDeviceTokenRspDefaultTypeInternal() {}
  union {
    IMGetDeviceTokenRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetDeviceTokenRspDefaultTypeInternal _IMGetDeviceTokenRsp_default_instance_;
constexpr IMRoleSet::IMRoleSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : master_(0u){}
struct IMRoleSetDefaultTypeInternal {
  constexpr IMRoleSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMRoleSetDefaultTypeInternal() {}
  union {
    IMRoleSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMRoleSetDefaultTypeInternal _IMRoleSet_default_instance_;
constexpr IMOnlineUserInfo::IMOnlineUserInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_stat_list_(){}
struct IMOnlineUserInfoDefaultTypeInternal {
  constexpr IMOnlineUserInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMOnlineUserInfoDefaultTypeInternal() {}
  union {
    IMOnlineUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMOnlineUserInfoDefaultTypeInternal _IMOnlineUserInfo_default_instance_;
constexpr IMMsgServInfo::IMMsgServInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , host_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0u)
  , max_conn_cnt_(0u)
  , cur_conn_cnt_(0u){}
struct IMMsgServInfoDefaultTypeInternal {
  constexpr IMMsgServInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMMsgServInfoDefaultTypeInternal() {}
  union {
    IMMsgServInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMMsgServInfoDefaultTypeInternal _IMMsgServInfo_default_instance_;
constexpr IMUserStatusUpdate::IMUserStatusUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_status_(0u)
  , user_id_(0u)
  , client_type_(1)
{}
struct IMUserStatusUpdateDefaultTypeInternal {
  constexpr IMUserStatusUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMUserStatusUpdateDefaultTypeInternal() {}
  union {
    IMUserStatusUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMUserStatusUpdateDefaultTypeInternal _IMUserStatusUpdate_default_instance_;
constexpr IMUserCntUpdate::IMUserCntUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_action_(0u)
  , user_id_(0u){}
struct IMUserCntUpdateDefaultTypeInternal {
  constexpr IMUserCntUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMUserCntUpdateDefaultTypeInternal() {}
  union {
    IMUserCntUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMUserCntUpdateDefaultTypeInternal _IMUserCntUpdate_default_instance_;
constexpr IMServerKickUser::IMServerKickUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0u)
  , reason_(0u)
  , client_type_(1)
{}
struct IMServerKickUserDefaultTypeInternal {
  constexpr IMServerKickUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMServerKickUserDefaultTypeInternal() {}
  union {
    IMServerKickUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMServerKickUserDefaultTypeInternal _IMServerKickUser_default_instance_;
constexpr IMServerPCLoginStatusNotify::IMServerPCLoginStatusNotify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0u)
  , login_status_(0u){}
struct IMServerPCLoginStatusNotifyDefaultTypeInternal {
  constexpr IMServerPCLoginStatusNotifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMServerPCLoginStatusNotifyDefaultTypeInternal() {}
  union {
    IMServerPCLoginStatusNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMServerPCLoginStatusNotifyDefaultTypeInternal _IMServerPCLoginStatusNotify_default_instance_;
constexpr IMPushToUserReq::IMPushToUserReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_token_list_()
  , flash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IMPushToUserReqDefaultTypeInternal {
  constexpr IMPushToUserReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMPushToUserReqDefaultTypeInternal() {}
  union {
    IMPushToUserReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMPushToUserReqDefaultTypeInternal _IMPushToUserReq_default_instance_;
constexpr IMPushToUserRsp::IMPushToUserRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : push_result_list_(){}
struct IMPushToUserRspDefaultTypeInternal {
  constexpr IMPushToUserRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMPushToUserRspDefaultTypeInternal() {}
  union {
    IMPushToUserRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMPushToUserRspDefaultTypeInternal _IMPushToUserRsp_default_instance_;
constexpr IMGroupGetShieldReq::IMGroupGetShieldReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_()
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_id_(0u){}
struct IMGroupGetShieldReqDefaultTypeInternal {
  constexpr IMGroupGetShieldReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGroupGetShieldReqDefaultTypeInternal() {}
  union {
    IMGroupGetShieldReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGroupGetShieldReqDefaultTypeInternal _IMGroupGetShieldReq_default_instance_;
constexpr IMGroupGetShieldRsp::IMGroupGetShieldRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shield_status_list_()
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_id_(0u){}
struct IMGroupGetShieldRspDefaultTypeInternal {
  constexpr IMGroupGetShieldRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGroupGetShieldRspDefaultTypeInternal() {}
  union {
    IMGroupGetShieldRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGroupGetShieldRspDefaultTypeInternal _IMGroupGetShieldRsp_default_instance_;
constexpr IMFileTransferReq::IMFileTransferReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_user_id_(0u)
  , to_user_id_(0u)
  , file_size_(0u)
  , trans_mode_(1)
{}
struct IMFileTransferReqDefaultTypeInternal {
  constexpr IMFileTransferReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMFileTransferReqDefaultTypeInternal() {}
  union {
    IMFileTransferReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMFileTransferReqDefaultTypeInternal _IMFileTransferReq_default_instance_;
constexpr IMFileTransferRsp::IMFileTransferRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_code_(0u)
  , from_user_id_(0u)
  , to_user_id_(0u)
  , file_size_(0u)
  , trans_mode_(1)
{}
struct IMFileTransferRspDefaultTypeInternal {
  constexpr IMFileTransferRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMFileTransferRspDefaultTypeInternal() {}
  union {
    IMFileTransferRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMFileTransferRspDefaultTypeInternal _IMFileTransferRsp_default_instance_;
constexpr IMFileServerIPReq::IMFileServerIPReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct IMFileServerIPReqDefaultTypeInternal {
  constexpr IMFileServerIPReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMFileServerIPReqDefaultTypeInternal() {}
  union {
    IMFileServerIPReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMFileServerIPReqDefaultTypeInternal _IMFileServerIPReq_default_instance_;
constexpr IMFileServerIPRsp::IMFileServerIPRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_addr_list_(){}
struct IMFileServerIPRspDefaultTypeInternal {
  constexpr IMFileServerIPRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMFileServerIPRspDefaultTypeInternal() {}
  union {
    IMFileServerIPRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMFileServerIPRspDefaultTypeInternal _IMFileServerIPRsp_default_instance_;
}  // namespace Server
}  // namespace IM
namespace IM {
namespace Server {

// ===================================================================

class IMStopReceivePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<IMStopReceivePacket>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

IMStopReceivePacket::IMStopReceivePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMStopReceivePacket)
}
IMStopReceivePacket::IMStopReceivePacket(const IMStopReceivePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMStopReceivePacket)
}

inline void IMStopReceivePacket::SharedCtor() {
result_ = 0u;
}

IMStopReceivePacket::~IMStopReceivePacket() {
  // @@protoc_insertion_point(destructor:IM.Server.IMStopReceivePacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMStopReceivePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMStopReceivePacket::ArenaDtor(void* object) {
  IMStopReceivePacket* _this = reinterpret_cast< IMStopReceivePacket* >(object);
  (void)_this;
}
void IMStopReceivePacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMStopReceivePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMStopReceivePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMStopReceivePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMStopReceivePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMStopReceivePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMStopReceivePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMStopReceivePacket)
  return target;
}

size_t IMStopReceivePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMStopReceivePacket)
  size_t total_size = 0;

  // required uint32 result = 1;
  if (_internal_has_result()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMStopReceivePacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMStopReceivePacket*>(
      &from));
}

void IMStopReceivePacket::MergeFrom(const IMStopReceivePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMStopReceivePacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMStopReceivePacket::CopyFrom(const IMStopReceivePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMStopReceivePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMStopReceivePacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMStopReceivePacket::InternalSwap(IMStopReceivePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

std::string IMStopReceivePacket::GetTypeName() const {
  return "IM.Server.IMStopReceivePacket";
}


// ===================================================================

class IMValidateReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMValidateReq>()._has_bits_);
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

IMValidateReq::IMValidateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMValidateReq)
}
IMValidateReq::IMValidateReq(const IMValidateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMValidateReq)
}

inline void IMValidateReq::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMValidateReq::~IMValidateReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMValidateReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMValidateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMValidateReq::ArenaDtor(void* object) {
  IMValidateReq* _this = reinterpret_cast< IMValidateReq* >(object);
  (void)_this;
}
void IMValidateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMValidateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMValidateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMValidateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      attach_data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMValidateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMValidateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMValidateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string user_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // required string password = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMValidateReq)
  return target;
}

size_t IMValidateReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Server.IMValidateReq)
  size_t total_size = 0;

  if (_internal_has_user_name()) {
    // required string user_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  if (_internal_has_password()) {
    // required string password = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return total_size;
}
size_t IMValidateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMValidateReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string user_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());

    // required string password = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMValidateReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMValidateReq*>(
      &from));
}

void IMValidateReq::MergeFrom(const IMValidateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMValidateReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_attach_data(from._internal_attach_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMValidateReq::CopyFrom(const IMValidateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMValidateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMValidateReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMValidateReq::InternalSwap(IMValidateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, lhs_arena,
      &other->user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
}

std::string IMValidateReq::GetTypeName() const {
  return "IM.Server.IMValidateReq";
}


// ===================================================================

class IMValidateRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMValidateRsp>()._has_bits_);
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_result_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::IM::BaseDefine::UserInfo& user_info(const IMValidateRsp* msg);
  static void set_has_user_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000011) ^ 0x00000011) != 0;
  }
};

const ::IM::BaseDefine::UserInfo&
IMValidateRsp::_Internal::user_info(const IMValidateRsp* msg) {
  return *msg->user_info_;
}
void IMValidateRsp::clear_user_info() {
  if (user_info_ != nullptr) user_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
IMValidateRsp::IMValidateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMValidateRsp)
}
IMValidateRsp::IMValidateRsp(const IMValidateRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_result_string()) {
    result_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_string(), 
      GetArenaForAllocation());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::IM::BaseDefine::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMValidateRsp)
}

inline void IMValidateRsp::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(result_code_));
}

IMValidateRsp::~IMValidateRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMValidateRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMValidateRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
}

void IMValidateRsp::ArenaDtor(void* object) {
  IMValidateRsp* _this = reinterpret_cast< IMValidateRsp* >(object);
  (void)_this;
}
void IMValidateRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMValidateRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMValidateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMValidateRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      result_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      attach_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(user_info_ != nullptr);
      user_info_->Clear();
    }
  }
  result_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMValidateRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_result_code(&has_bits);
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string result_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_result_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .IM.BaseDefine.UserInfo user_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMValidateRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMValidateRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string user_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // required uint32 result_code = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result_code(), target);
  }

  // optional string result_string = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_result_string(), target);
  }

  // optional .IM.BaseDefine.UserInfo user_info = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::user_info(this), target, stream);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMValidateRsp)
  return target;
}

size_t IMValidateRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Server.IMValidateRsp)
  size_t total_size = 0;

  if (_internal_has_user_name()) {
    // required string user_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  if (_internal_has_result_code()) {
    // required uint32 result_code = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  return total_size;
}
size_t IMValidateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMValidateRsp)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required string user_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());

    // required uint32 result_code = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string result_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_result_string());
    }

    // optional bytes attach_data = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attach_data());
    }

    // optional .IM.BaseDefine.UserInfo user_info = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMValidateRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMValidateRsp*>(
      &from));
}

void IMValidateRsp::MergeFrom(const IMValidateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMValidateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_result_string(from._internal_result_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_user_info()->::IM::BaseDefine::UserInfo::MergeFrom(from._internal_user_info());
    }
    if (cached_has_bits & 0x00000010u) {
      result_code_ = from.result_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMValidateRsp::CopyFrom(const IMValidateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMValidateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMValidateRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_user_info()) {
    if (!user_info_->IsInitialized()) return false;
  }
  return true;
}

void IMValidateRsp::InternalSwap(IMValidateRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, lhs_arena,
      &other->user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_string_, lhs_arena,
      &other->result_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMValidateRsp, result_code_)
      + sizeof(IMValidateRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(IMValidateRsp, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

std::string IMValidateRsp::GetTypeName() const {
  return "IM.Server.IMValidateRsp";
}


// ===================================================================

class IMGetDeviceTokenReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGetDeviceTokenReq>()._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMGetDeviceTokenReq::IMGetDeviceTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  user_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMGetDeviceTokenReq)
}
IMGetDeviceTokenReq::IMGetDeviceTokenReq(const IMGetDeviceTokenReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      user_id_(from.user_id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGetDeviceTokenReq)
}

inline void IMGetDeviceTokenReq::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGetDeviceTokenReq::~IMGetDeviceTokenReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGetDeviceTokenReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMGetDeviceTokenReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetDeviceTokenReq::ArenaDtor(void* object) {
  IMGetDeviceTokenReq* _this = reinterpret_cast< IMGetDeviceTokenReq* >(object);
  (void)_this;
}
void IMGetDeviceTokenReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetDeviceTokenReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetDeviceTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGetDeviceTokenReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    attach_data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetDeviceTokenReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_user_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetDeviceTokenReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGetDeviceTokenReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 user_id = 1;
  for (int i = 0, n = this->_internal_user_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGetDeviceTokenReq)
  return target;
}

size_t IMGetDeviceTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGetDeviceTokenReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 user_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->user_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_user_id_size());
    total_size += data_size;
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetDeviceTokenReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGetDeviceTokenReq*>(
      &from));
}

void IMGetDeviceTokenReq::MergeFrom(const IMGetDeviceTokenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGetDeviceTokenReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_id_.MergeFrom(from.user_id_);
  if (from._internal_has_attach_data()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetDeviceTokenReq::CopyFrom(const IMGetDeviceTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGetDeviceTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetDeviceTokenReq::IsInitialized() const {
  return true;
}

void IMGetDeviceTokenReq::InternalSwap(IMGetDeviceTokenReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.InternalSwap(&other->user_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
}

std::string IMGetDeviceTokenReq::GetTypeName() const {
  return "IM.Server.IMGetDeviceTokenReq";
}


// ===================================================================

class IMGetDeviceTokenRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGetDeviceTokenRsp>()._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void IMGetDeviceTokenRsp::clear_user_token_info() {
  user_token_info_.Clear();
}
IMGetDeviceTokenRsp::IMGetDeviceTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  user_token_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMGetDeviceTokenRsp)
}
IMGetDeviceTokenRsp::IMGetDeviceTokenRsp(const IMGetDeviceTokenRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      user_token_info_(from.user_token_info_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGetDeviceTokenRsp)
}

inline void IMGetDeviceTokenRsp::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGetDeviceTokenRsp::~IMGetDeviceTokenRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGetDeviceTokenRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMGetDeviceTokenRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetDeviceTokenRsp::ArenaDtor(void* object) {
  IMGetDeviceTokenRsp* _this = reinterpret_cast< IMGetDeviceTokenRsp* >(object);
  (void)_this;
}
void IMGetDeviceTokenRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetDeviceTokenRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetDeviceTokenRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGetDeviceTokenRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_token_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    attach_data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetDeviceTokenRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_token_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetDeviceTokenRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGetDeviceTokenRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_token_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_user_token_info(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGetDeviceTokenRsp)
  return target;
}

size_t IMGetDeviceTokenRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGetDeviceTokenRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
  total_size += 1UL * this->_internal_user_token_info_size();
  for (const auto& msg : this->user_token_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetDeviceTokenRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGetDeviceTokenRsp*>(
      &from));
}

void IMGetDeviceTokenRsp::MergeFrom(const IMGetDeviceTokenRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGetDeviceTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_token_info_.MergeFrom(from.user_token_info_);
  if (from._internal_has_attach_data()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetDeviceTokenRsp::CopyFrom(const IMGetDeviceTokenRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGetDeviceTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetDeviceTokenRsp::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(user_token_info_))
    return false;
  return true;
}

void IMGetDeviceTokenRsp::InternalSwap(IMGetDeviceTokenRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_token_info_.InternalSwap(&other->user_token_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
}

std::string IMGetDeviceTokenRsp::GetTypeName() const {
  return "IM.Server.IMGetDeviceTokenRsp";
}


// ===================================================================

class IMRoleSet::_Internal {
 public:
  using HasBits = decltype(std::declval<IMRoleSet>()._has_bits_);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

IMRoleSet::IMRoleSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMRoleSet)
}
IMRoleSet::IMRoleSet(const IMRoleSet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  master_ = from.master_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMRoleSet)
}

inline void IMRoleSet::SharedCtor() {
master_ = 0u;
}

IMRoleSet::~IMRoleSet() {
  // @@protoc_insertion_point(destructor:IM.Server.IMRoleSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMRoleSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMRoleSet::ArenaDtor(void* object) {
  IMRoleSet* _this = reinterpret_cast< IMRoleSet* >(object);
  (void)_this;
}
void IMRoleSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMRoleSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMRoleSet::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMRoleSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  master_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMRoleSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 master = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_master(&has_bits);
          master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMRoleSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMRoleSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 master = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_master(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMRoleSet)
  return target;
}

size_t IMRoleSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMRoleSet)
  size_t total_size = 0;

  // required uint32 master = 1;
  if (_internal_has_master()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_master());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMRoleSet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMRoleSet*>(
      &from));
}

void IMRoleSet::MergeFrom(const IMRoleSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMRoleSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_master()) {
    _internal_set_master(from._internal_master());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMRoleSet::CopyFrom(const IMRoleSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMRoleSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRoleSet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMRoleSet::InternalSwap(IMRoleSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(master_, other->master_);
}

std::string IMRoleSet::GetTypeName() const {
  return "IM.Server.IMRoleSet";
}


// ===================================================================

class IMOnlineUserInfo::_Internal {
 public:
};

void IMOnlineUserInfo::clear_user_stat_list() {
  user_stat_list_.Clear();
}
IMOnlineUserInfo::IMOnlineUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  user_stat_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMOnlineUserInfo)
}
IMOnlineUserInfo::IMOnlineUserInfo(const IMOnlineUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      user_stat_list_(from.user_stat_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMOnlineUserInfo)
}

inline void IMOnlineUserInfo::SharedCtor() {
}

IMOnlineUserInfo::~IMOnlineUserInfo() {
  // @@protoc_insertion_point(destructor:IM.Server.IMOnlineUserInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMOnlineUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMOnlineUserInfo::ArenaDtor(void* object) {
  IMOnlineUserInfo* _this = reinterpret_cast< IMOnlineUserInfo* >(object);
  (void)_this;
}
void IMOnlineUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMOnlineUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMOnlineUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMOnlineUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_stat_list_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMOnlineUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_stat_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMOnlineUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMOnlineUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_stat_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_user_stat_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMOnlineUserInfo)
  return target;
}

size_t IMOnlineUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMOnlineUserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
  total_size += 1UL * this->_internal_user_stat_list_size();
  for (const auto& msg : this->user_stat_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMOnlineUserInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMOnlineUserInfo*>(
      &from));
}

void IMOnlineUserInfo::MergeFrom(const IMOnlineUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMOnlineUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_stat_list_.MergeFrom(from.user_stat_list_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMOnlineUserInfo::CopyFrom(const IMOnlineUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMOnlineUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMOnlineUserInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(user_stat_list_))
    return false;
  return true;
}

void IMOnlineUserInfo::InternalSwap(IMOnlineUserInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_stat_list_.InternalSwap(&other->user_stat_list_);
}

std::string IMOnlineUserInfo::GetTypeName() const {
  return "IM.Server.IMOnlineUserInfo";
}


// ===================================================================

class IMMsgServInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<IMMsgServInfo>()._has_bits_);
  static void set_has_ip1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_conn_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cur_conn_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_host_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

IMMsgServInfo::IMMsgServInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMMsgServInfo)
}
IMMsgServInfo::IMMsgServInfo(const IMMsgServInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ip1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip1()) {
    ip1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip1(), 
      GetArenaForAllocation());
  }
  ip2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip2()) {
    ip2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip2(), 
      GetArenaForAllocation());
  }
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host_name()) {
    host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_conn_cnt_) -
    reinterpret_cast<char*>(&port_)) + sizeof(cur_conn_cnt_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMMsgServInfo)
}

inline void IMMsgServInfo::SharedCtor() {
ip1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cur_conn_cnt_) -
    reinterpret_cast<char*>(&port_)) + sizeof(cur_conn_cnt_));
}

IMMsgServInfo::~IMMsgServInfo() {
  // @@protoc_insertion_point(destructor:IM.Server.IMMsgServInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMMsgServInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMMsgServInfo::ArenaDtor(void* object) {
  IMMsgServInfo* _this = reinterpret_cast< IMMsgServInfo* >(object);
  (void)_this;
}
void IMMsgServInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMMsgServInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMMsgServInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMMsgServInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ip1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ip2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      host_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cur_conn_cnt_) -
        reinterpret_cast<char*>(&port_)) + sizeof(cur_conn_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMMsgServInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string ip1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string ip2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 max_conn_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_conn_cnt(&has_bits);
          max_conn_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 cur_conn_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cur_conn_cnt(&has_bits);
          cur_conn_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string host_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_host_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMMsgServInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMMsgServInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip1(), target);
  }

  // required string ip2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip2(), target);
  }

  // required uint32 port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // required uint32 max_conn_cnt = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_conn_cnt(), target);
  }

  // required uint32 cur_conn_cnt = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cur_conn_cnt(), target);
  }

  // required string host_name = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_host_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMMsgServInfo)
  return target;
}

size_t IMMsgServInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Server.IMMsgServInfo)
  size_t total_size = 0;

  if (_internal_has_ip1()) {
    // required string ip1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip1());
  }

  if (_internal_has_ip2()) {
    // required string ip2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip2());
  }

  if (_internal_has_host_name()) {
    // required string host_name = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  if (_internal_has_port()) {
    // required uint32 port = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  if (_internal_has_max_conn_cnt()) {
    // required uint32 max_conn_cnt = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_conn_cnt());
  }

  if (_internal_has_cur_conn_cnt()) {
    // required uint32 cur_conn_cnt = 5;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cur_conn_cnt());
  }

  return total_size;
}
size_t IMMsgServInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMMsgServInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string ip1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip1());

    // required string ip2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip2());

    // required string host_name = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());

    // required uint32 port = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());

    // required uint32 max_conn_cnt = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_conn_cnt());

    // required uint32 cur_conn_cnt = 5;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cur_conn_cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMMsgServInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMMsgServInfo*>(
      &from));
}

void IMMsgServInfo::MergeFrom(const IMMsgServInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMMsgServInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ip1(from._internal_ip1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip2(from._internal_ip2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_host_name(from._internal_host_name());
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_conn_cnt_ = from.max_conn_cnt_;
    }
    if (cached_has_bits & 0x00000020u) {
      cur_conn_cnt_ = from.cur_conn_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMMsgServInfo::CopyFrom(const IMMsgServInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMMsgServInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMMsgServInfo::InternalSwap(IMMsgServInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip1_, lhs_arena,
      &other->ip1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip2_, lhs_arena,
      &other->ip2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_name_, lhs_arena,
      &other->host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMMsgServInfo, cur_conn_cnt_)
      + sizeof(IMMsgServInfo::cur_conn_cnt_)
      - PROTOBUF_FIELD_OFFSET(IMMsgServInfo, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

std::string IMMsgServInfo::GetTypeName() const {
  return "IM.Server.IMMsgServInfo";
}


// ===================================================================

class IMUserStatusUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<IMUserStatusUpdate>()._has_bits_);
  static void set_has_user_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

IMUserStatusUpdate::IMUserStatusUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMUserStatusUpdate)
}
IMUserStatusUpdate::IMUserStatusUpdate(const IMUserStatusUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_status_, &from.user_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_status_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMUserStatusUpdate)
}

inline void IMUserStatusUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&user_status_)) + sizeof(user_id_));
client_type_ = 1;
}

IMUserStatusUpdate::~IMUserStatusUpdate() {
  // @@protoc_insertion_point(destructor:IM.Server.IMUserStatusUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMUserStatusUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMUserStatusUpdate::ArenaDtor(void* object) {
  IMUserStatusUpdate* _this = reinterpret_cast< IMUserStatusUpdate* >(object);
  (void)_this;
}
void IMUserStatusUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMUserStatusUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMUserStatusUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMUserStatusUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&user_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&user_status_)) + sizeof(user_id_));
    client_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMUserStatusUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 user_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_status(&has_bits);
          user_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .IM.BaseDefine.ClientType client_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::IM::BaseDefine::ClientType_IsValid(val))) {
            _internal_set_client_type(static_cast<::IM::BaseDefine::ClientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUserStatusUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMUserStatusUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 user_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_status(), target);
  }

  // required uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // required .IM.BaseDefine.ClientType client_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_client_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMUserStatusUpdate)
  return target;
}

size_t IMUserStatusUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Server.IMUserStatusUpdate)
  size_t total_size = 0;

  if (_internal_has_user_status()) {
    // required uint32 user_status = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_status());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_client_type()) {
    // required .IM.BaseDefine.ClientType client_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  return total_size;
}
size_t IMUserStatusUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMUserStatusUpdate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_status = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_status());

    // required uint32 user_id = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required .IM.BaseDefine.ClientType client_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUserStatusUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMUserStatusUpdate*>(
      &from));
}

void IMUserStatusUpdate::MergeFrom(const IMUserStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMUserStatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_status_ = from.user_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_type_ = from.client_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMUserStatusUpdate::CopyFrom(const IMUserStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMUserStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserStatusUpdate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMUserStatusUpdate::InternalSwap(IMUserStatusUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUserStatusUpdate, user_id_)
      + sizeof(IMUserStatusUpdate::user_id_)
      - PROTOBUF_FIELD_OFFSET(IMUserStatusUpdate, user_status_)>(
          reinterpret_cast<char*>(&user_status_),
          reinterpret_cast<char*>(&other->user_status_));
  swap(client_type_, other->client_type_);
}

std::string IMUserStatusUpdate::GetTypeName() const {
  return "IM.Server.IMUserStatusUpdate";
}


// ===================================================================

class IMUserCntUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<IMUserCntUpdate>()._has_bits_);
  static void set_has_user_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

IMUserCntUpdate::IMUserCntUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMUserCntUpdate)
}
IMUserCntUpdate::IMUserCntUpdate(const IMUserCntUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_action_, &from.user_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&user_action_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMUserCntUpdate)
}

inline void IMUserCntUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&user_action_)) + sizeof(user_id_));
}

IMUserCntUpdate::~IMUserCntUpdate() {
  // @@protoc_insertion_point(destructor:IM.Server.IMUserCntUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMUserCntUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMUserCntUpdate::ArenaDtor(void* object) {
  IMUserCntUpdate* _this = reinterpret_cast< IMUserCntUpdate* >(object);
  (void)_this;
}
void IMUserCntUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMUserCntUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMUserCntUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMUserCntUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&user_action_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMUserCntUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 user_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_action(&has_bits);
          user_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUserCntUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMUserCntUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 user_action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_action(), target);
  }

  // required uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMUserCntUpdate)
  return target;
}

size_t IMUserCntUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Server.IMUserCntUpdate)
  size_t total_size = 0;

  if (_internal_has_user_action()) {
    // required uint32 user_action = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_action());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return total_size;
}
size_t IMUserCntUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMUserCntUpdate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 user_action = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_action());

    // required uint32 user_id = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUserCntUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMUserCntUpdate*>(
      &from));
}

void IMUserCntUpdate::MergeFrom(const IMUserCntUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMUserCntUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_action_ = from.user_action_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMUserCntUpdate::CopyFrom(const IMUserCntUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMUserCntUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserCntUpdate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMUserCntUpdate::InternalSwap(IMUserCntUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUserCntUpdate, user_id_)
      + sizeof(IMUserCntUpdate::user_id_)
      - PROTOBUF_FIELD_OFFSET(IMUserCntUpdate, user_action_)>(
          reinterpret_cast<char*>(&user_action_),
          reinterpret_cast<char*>(&other->user_action_));
}

std::string IMUserCntUpdate::GetTypeName() const {
  return "IM.Server.IMUserCntUpdate";
}


// ===================================================================

class IMServerKickUser::_Internal {
 public:
  using HasBits = decltype(std::declval<IMServerKickUser>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

IMServerKickUser::IMServerKickUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMServerKickUser)
}
IMServerKickUser::IMServerKickUser(const IMServerKickUser& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMServerKickUser)
}

inline void IMServerKickUser::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(reason_));
client_type_ = 1;
}

IMServerKickUser::~IMServerKickUser() {
  // @@protoc_insertion_point(destructor:IM.Server.IMServerKickUser)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMServerKickUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMServerKickUser::ArenaDtor(void* object) {
  IMServerKickUser* _this = reinterpret_cast< IMServerKickUser* >(object);
  (void)_this;
}
void IMServerKickUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMServerKickUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMServerKickUser::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMServerKickUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(reason_));
    client_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMServerKickUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .IM.BaseDefine.ClientType client_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::IM::BaseDefine::ClientType_IsValid(val))) {
            _internal_set_client_type(static_cast<::IM::BaseDefine::ClientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMServerKickUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMServerKickUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // required .IM.BaseDefine.ClientType client_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_client_type(), target);
  }

  // required uint32 reason = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMServerKickUser)
  return target;
}

size_t IMServerKickUser::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Server.IMServerKickUser)
  size_t total_size = 0;

  if (_internal_has_user_id()) {
    // required uint32 user_id = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_reason()) {
    // required uint32 reason = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_reason());
  }

  if (_internal_has_client_type()) {
    // required .IM.BaseDefine.ClientType client_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  return total_size;
}
size_t IMServerKickUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMServerKickUser)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 reason = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_reason());

    // required .IM.BaseDefine.ClientType client_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMServerKickUser::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMServerKickUser*>(
      &from));
}

void IMServerKickUser::MergeFrom(const IMServerKickUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMServerKickUser)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_type_ = from.client_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMServerKickUser::CopyFrom(const IMServerKickUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMServerKickUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMServerKickUser::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMServerKickUser::InternalSwap(IMServerKickUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMServerKickUser, reason_)
      + sizeof(IMServerKickUser::reason_)
      - PROTOBUF_FIELD_OFFSET(IMServerKickUser, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
  swap(client_type_, other->client_type_);
}

std::string IMServerKickUser::GetTypeName() const {
  return "IM.Server.IMServerKickUser";
}


// ===================================================================

class IMServerPCLoginStatusNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<IMServerPCLoginStatusNotify>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_login_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

IMServerPCLoginStatusNotify::IMServerPCLoginStatusNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMServerPCLoginStatusNotify)
}
IMServerPCLoginStatusNotify::IMServerPCLoginStatusNotify(const IMServerPCLoginStatusNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_status_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(login_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMServerPCLoginStatusNotify)
}

inline void IMServerPCLoginStatusNotify::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&login_status_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(login_status_));
}

IMServerPCLoginStatusNotify::~IMServerPCLoginStatusNotify() {
  // @@protoc_insertion_point(destructor:IM.Server.IMServerPCLoginStatusNotify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMServerPCLoginStatusNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMServerPCLoginStatusNotify::ArenaDtor(void* object) {
  IMServerPCLoginStatusNotify* _this = reinterpret_cast< IMServerPCLoginStatusNotify* >(object);
  (void)_this;
}
void IMServerPCLoginStatusNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMServerPCLoginStatusNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMServerPCLoginStatusNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMServerPCLoginStatusNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&login_status_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(login_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMServerPCLoginStatusNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_login_status(&has_bits);
          login_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMServerPCLoginStatusNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMServerPCLoginStatusNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // required uint32 login_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_login_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMServerPCLoginStatusNotify)
  return target;
}

size_t IMServerPCLoginStatusNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Server.IMServerPCLoginStatusNotify)
  size_t total_size = 0;

  if (_internal_has_user_id()) {
    // required uint32 user_id = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_status()) {
    // required uint32 login_status = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_login_status());
  }

  return total_size;
}
size_t IMServerPCLoginStatusNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMServerPCLoginStatusNotify)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_status = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_login_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMServerPCLoginStatusNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMServerPCLoginStatusNotify*>(
      &from));
}

void IMServerPCLoginStatusNotify::MergeFrom(const IMServerPCLoginStatusNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMServerPCLoginStatusNotify)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      login_status_ = from.login_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMServerPCLoginStatusNotify::CopyFrom(const IMServerPCLoginStatusNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMServerPCLoginStatusNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMServerPCLoginStatusNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMServerPCLoginStatusNotify::InternalSwap(IMServerPCLoginStatusNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMServerPCLoginStatusNotify, login_status_)
      + sizeof(IMServerPCLoginStatusNotify::login_status_)
      - PROTOBUF_FIELD_OFFSET(IMServerPCLoginStatusNotify, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string IMServerPCLoginStatusNotify::GetTypeName() const {
  return "IM.Server.IMServerPCLoginStatusNotify";
}


// ===================================================================

class IMPushToUserReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMPushToUserReq>()._has_bits_);
  static void set_has_flash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

void IMPushToUserReq::clear_user_token_list() {
  user_token_list_.Clear();
}
IMPushToUserReq::IMPushToUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  user_token_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMPushToUserReq)
}
IMPushToUserReq::IMPushToUserReq(const IMPushToUserReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      user_token_list_(from.user_token_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  flash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_flash()) {
    flash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flash(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMPushToUserReq)
}

inline void IMPushToUserReq::SharedCtor() {
flash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMPushToUserReq::~IMPushToUserReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMPushToUserReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMPushToUserReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMPushToUserReq::ArenaDtor(void* object) {
  IMPushToUserReq* _this = reinterpret_cast< IMPushToUserReq* >(object);
  (void)_this;
}
void IMPushToUserReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMPushToUserReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMPushToUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMPushToUserReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_token_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      flash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMPushToUserReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string flash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_token_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMPushToUserReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMPushToUserReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string flash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_flash(), target);
  }

  // required string data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_token_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_user_token_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMPushToUserReq)
  return target;
}

size_t IMPushToUserReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Server.IMPushToUserReq)
  size_t total_size = 0;

  if (_internal_has_flash()) {
    // required string flash = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flash());
  }

  if (_internal_has_data()) {
    // required string data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return total_size;
}
size_t IMPushToUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMPushToUserReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string flash = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flash());

    // required string data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
  total_size += 1UL * this->_internal_user_token_list_size();
  for (const auto& msg : this->user_token_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMPushToUserReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMPushToUserReq*>(
      &from));
}

void IMPushToUserReq::MergeFrom(const IMPushToUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMPushToUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_token_list_.MergeFrom(from.user_token_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_flash(from._internal_flash());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMPushToUserReq::CopyFrom(const IMPushToUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMPushToUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushToUserReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(user_token_list_))
    return false;
  return true;
}

void IMPushToUserReq::InternalSwap(IMPushToUserReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_token_list_.InternalSwap(&other->user_token_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flash_, lhs_arena,
      &other->flash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

std::string IMPushToUserReq::GetTypeName() const {
  return "IM.Server.IMPushToUserReq";
}


// ===================================================================

class IMPushToUserRsp::_Internal {
 public:
};

void IMPushToUserRsp::clear_push_result_list() {
  push_result_list_.Clear();
}
IMPushToUserRsp::IMPushToUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  push_result_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMPushToUserRsp)
}
IMPushToUserRsp::IMPushToUserRsp(const IMPushToUserRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      push_result_list_(from.push_result_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMPushToUserRsp)
}

inline void IMPushToUserRsp::SharedCtor() {
}

IMPushToUserRsp::~IMPushToUserRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMPushToUserRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMPushToUserRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMPushToUserRsp::ArenaDtor(void* object) {
  IMPushToUserRsp* _this = reinterpret_cast< IMPushToUserRsp* >(object);
  (void)_this;
}
void IMPushToUserRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMPushToUserRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMPushToUserRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMPushToUserRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  push_result_list_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMPushToUserRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .IM.BaseDefine.PushResult push_result_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_push_result_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMPushToUserRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMPushToUserRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.PushResult push_result_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_push_result_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_push_result_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMPushToUserRsp)
  return target;
}

size_t IMPushToUserRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMPushToUserRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.PushResult push_result_list = 1;
  total_size += 1UL * this->_internal_push_result_list_size();
  for (const auto& msg : this->push_result_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMPushToUserRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMPushToUserRsp*>(
      &from));
}

void IMPushToUserRsp::MergeFrom(const IMPushToUserRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMPushToUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  push_result_list_.MergeFrom(from.push_result_list_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMPushToUserRsp::CopyFrom(const IMPushToUserRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMPushToUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushToUserRsp::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(push_result_list_))
    return false;
  return true;
}

void IMPushToUserRsp::InternalSwap(IMPushToUserRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  push_result_list_.InternalSwap(&other->push_result_list_);
}

std::string IMPushToUserRsp::GetTypeName() const {
  return "IM.Server.IMPushToUserRsp";
}


// ===================================================================

class IMGroupGetShieldReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupGetShieldReq>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

IMGroupGetShieldReq::IMGroupGetShieldReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  user_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMGroupGetShieldReq)
}
IMGroupGetShieldReq::IMGroupGetShieldReq(const IMGroupGetShieldReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      user_id_(from.user_id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGroupGetShieldReq)
}

inline void IMGroupGetShieldReq::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
group_id_ = 0u;
}

IMGroupGetShieldReq::~IMGroupGetShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGroupGetShieldReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMGroupGetShieldReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGroupGetShieldReq::ArenaDtor(void* object) {
  IMGroupGetShieldReq* _this = reinterpret_cast< IMGroupGetShieldReq* >(object);
  (void)_this;
}
void IMGroupGetShieldReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGroupGetShieldReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGroupGetShieldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGroupGetShieldReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    attach_data_.ClearNonDefaultToEmpty();
  }
  group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupGetShieldReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_user_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupGetShieldReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGroupGetShieldReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group_id(), target);
  }

  // repeated uint32 user_id = 2;
  for (int i = 0, n = this->_internal_user_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(i), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGroupGetShieldReq)
  return target;
}

size_t IMGroupGetShieldReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGroupGetShieldReq)
  size_t total_size = 0;

  // required uint32 group_id = 1;
  if (_internal_has_group_id()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 user_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->user_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_user_id_size());
    total_size += data_size;
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupGetShieldReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGroupGetShieldReq*>(
      &from));
}

void IMGroupGetShieldReq::MergeFrom(const IMGroupGetShieldReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGroupGetShieldReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_id_.MergeFrom(from.user_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupGetShieldReq::CopyFrom(const IMGroupGetShieldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGroupGetShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupGetShieldReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMGroupGetShieldReq::InternalSwap(IMGroupGetShieldReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.InternalSwap(&other->user_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  swap(group_id_, other->group_id_);
}

std::string IMGroupGetShieldReq::GetTypeName() const {
  return "IM.Server.IMGroupGetShieldReq";
}


// ===================================================================

class IMGroupGetShieldRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupGetShieldRsp>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void IMGroupGetShieldRsp::clear_shield_status_list() {
  shield_status_list_.Clear();
}
IMGroupGetShieldRsp::IMGroupGetShieldRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  shield_status_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMGroupGetShieldRsp)
}
IMGroupGetShieldRsp::IMGroupGetShieldRsp(const IMGroupGetShieldRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      shield_status_list_(from.shield_status_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGroupGetShieldRsp)
}

inline void IMGroupGetShieldRsp::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
group_id_ = 0u;
}

IMGroupGetShieldRsp::~IMGroupGetShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGroupGetShieldRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMGroupGetShieldRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGroupGetShieldRsp::ArenaDtor(void* object) {
  IMGroupGetShieldRsp* _this = reinterpret_cast< IMGroupGetShieldRsp* >(object);
  (void)_this;
}
void IMGroupGetShieldRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGroupGetShieldRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGroupGetShieldRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGroupGetShieldRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shield_status_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    attach_data_.ClearNonDefaultToEmpty();
  }
  group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupGetShieldRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shield_status_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupGetShieldRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGroupGetShieldRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group_id(), target);
  }

  // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shield_status_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shield_status_list(i), target, stream);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGroupGetShieldRsp)
  return target;
}

size_t IMGroupGetShieldRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGroupGetShieldRsp)
  size_t total_size = 0;

  // required uint32 group_id = 1;
  if (_internal_has_group_id()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
  total_size += 1UL * this->_internal_shield_status_list_size();
  for (const auto& msg : this->shield_status_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupGetShieldRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGroupGetShieldRsp*>(
      &from));
}

void IMGroupGetShieldRsp::MergeFrom(const IMGroupGetShieldRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGroupGetShieldRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shield_status_list_.MergeFrom(from.shield_status_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupGetShieldRsp::CopyFrom(const IMGroupGetShieldRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGroupGetShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupGetShieldRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(shield_status_list_))
    return false;
  return true;
}

void IMGroupGetShieldRsp::InternalSwap(IMGroupGetShieldRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shield_status_list_.InternalSwap(&other->shield_status_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  swap(group_id_, other->group_id_);
}

std::string IMGroupGetShieldRsp::GetTypeName() const {
  return "IM.Server.IMGroupGetShieldRsp";
}


// ===================================================================

class IMFileTransferReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMFileTransferReq>()._has_bits_);
  static void set_has_from_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_to_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_trans_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003d) ^ 0x0000003d) != 0;
  }
};

IMFileTransferReq::IMFileTransferReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMFileTransferReq)
}
IMFileTransferReq::IMFileTransferReq(const IMFileTransferReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trans_mode_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(trans_mode_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileTransferReq)
}

inline void IMFileTransferReq::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(file_size_));
trans_mode_ = 1;
}

IMFileTransferReq::~IMFileTransferReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileTransferReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMFileTransferReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMFileTransferReq::ArenaDtor(void* object) {
  IMFileTransferReq* _this = reinterpret_cast< IMFileTransferReq* >(object);
  (void)_this;
}
void IMFileTransferReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFileTransferReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMFileTransferReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileTransferReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      attach_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&from_user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_size_) -
        reinterpret_cast<char*>(&from_user_id_)) + sizeof(file_size_));
    trans_mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileTransferReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_from_user_id(&has_bits);
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 to_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_to_user_id(&has_bits);
          to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .IM.BaseDefine.TransferFileType trans_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::IM::BaseDefine::TransferFileType_IsValid(val))) {
            _internal_set_trans_mode(static_cast<::IM::BaseDefine::TransferFileType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileTransferReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileTransferReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 from_user_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // required uint32 to_user_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_user_id(), target);
  }

  // required string file_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // required uint32 file_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_size(), target);
  }

  // required .IM.BaseDefine.TransferFileType trans_mode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_trans_mode(), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileTransferReq)
  return target;
}

size_t IMFileTransferReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Server.IMFileTransferReq)
  size_t total_size = 0;

  if (_internal_has_file_name()) {
    // required string file_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  if (_internal_has_from_user_id()) {
    // required uint32 from_user_id = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  if (_internal_has_to_user_id()) {
    // required uint32 to_user_id = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());
  }

  if (_internal_has_file_size()) {
    // required uint32 file_size = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
  }

  if (_internal_has_trans_mode()) {
    // required .IM.BaseDefine.TransferFileType trans_mode = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trans_mode());
  }

  return total_size;
}
size_t IMFileTransferReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileTransferReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required string file_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());

    // required uint32 from_user_id = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());

    // required uint32 to_user_id = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());

    // required uint32 file_size = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());

    // required .IM.BaseDefine.TransferFileType trans_mode = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trans_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileTransferReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFileTransferReq*>(
      &from));
}

void IMFileTransferReq::MergeFrom(const IMFileTransferReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileTransferReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000004u) {
      from_user_id_ = from.from_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      to_user_id_ = from.to_user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      trans_mode_ = from.trans_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileTransferReq::CopyFrom(const IMFileTransferReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileTransferReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileTransferReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMFileTransferReq::InternalSwap(IMFileTransferReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFileTransferReq, file_size_)
      + sizeof(IMFileTransferReq::file_size_)
      - PROTOBUF_FIELD_OFFSET(IMFileTransferReq, from_user_id_)>(
          reinterpret_cast<char*>(&from_user_id_),
          reinterpret_cast<char*>(&other->from_user_id_));
  swap(trans_mode_, other->trans_mode_);
}

std::string IMFileTransferReq::GetTypeName() const {
  return "IM.Server.IMFileTransferReq";
}


// ===================================================================

class IMFileTransferRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMFileTransferRsp>()._has_bits_);
  static void set_has_result_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_from_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_to_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trans_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000038) ^ 0x00000038) != 0;
  }
};

IMFileTransferRsp::IMFileTransferRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMFileTransferRsp)
}
IMFileTransferRsp::IMFileTransferRsp(const IMFileTransferRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_task_id()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&result_code_, &from.result_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&trans_mode_) -
    reinterpret_cast<char*>(&result_code_)) + sizeof(trans_mode_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileTransferRsp)
}

inline void IMFileTransferRsp::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&result_code_)) + sizeof(file_size_));
trans_mode_ = 1;
}

IMFileTransferRsp::~IMFileTransferRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileTransferRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMFileTransferRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMFileTransferRsp::ArenaDtor(void* object) {
  IMFileTransferRsp* _this = reinterpret_cast< IMFileTransferRsp* >(object);
  (void)_this;
}
void IMFileTransferRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFileTransferRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMFileTransferRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileTransferRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      task_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      attach_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&result_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_size_) -
        reinterpret_cast<char*>(&result_code_)) + sizeof(file_size_));
    trans_mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileTransferRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result_code(&has_bits);
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 from_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_from_user_id(&has_bits);
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 to_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_to_user_id(&has_bits);
          to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string task_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .IM.BaseDefine.TransferFileType trans_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::IM::BaseDefine::TransferFileType_IsValid(val))) {
            _internal_set_trans_mode(static_cast<::IM::BaseDefine::TransferFileType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileTransferRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileTransferRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result_code(), target);
  }

  // required uint32 from_user_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_from_user_id(), target);
  }

  // required uint32 to_user_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_to_user_id(), target);
  }

  // optional string file_name = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_name(), target);
  }

  // optional uint32 file_size = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_file_size(), target);
  }

  // optional string task_id = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_task_id(), target);
  }

  // optional .IM.BaseDefine.TransferFileType trans_mode = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_trans_mode(), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileTransferRsp)
  return target;
}

size_t IMFileTransferRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Server.IMFileTransferRsp)
  size_t total_size = 0;

  if (_internal_has_result_code()) {
    // required uint32 result_code = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (_internal_has_from_user_id()) {
    // required uint32 from_user_id = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  if (_internal_has_to_user_id()) {
    // required uint32 to_user_id = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());
  }

  return total_size;
}
size_t IMFileTransferRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileTransferRsp)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000038) ^ 0x00000038) == 0) {  // All required fields are present.
    // required uint32 result_code = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());

    // required uint32 from_user_id = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());

    // required uint32 to_user_id = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional string task_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_task_id());
    }

    // optional bytes attach_data = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attach_data());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint32 file_size = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
    }

    // optional .IM.BaseDefine.TransferFileType trans_mode = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trans_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileTransferRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFileTransferRsp*>(
      &from));
}

void IMFileTransferRsp::MergeFrom(const IMFileTransferRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileTransferRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_task_id(from._internal_task_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000008u) {
      result_code_ = from.result_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      from_user_id_ = from.from_user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      to_user_id_ = from.to_user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      trans_mode_ = from.trans_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileTransferRsp::CopyFrom(const IMFileTransferRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileTransferRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileTransferRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMFileTransferRsp::InternalSwap(IMFileTransferRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, lhs_arena,
      &other->task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFileTransferRsp, file_size_)
      + sizeof(IMFileTransferRsp::file_size_)
      - PROTOBUF_FIELD_OFFSET(IMFileTransferRsp, result_code_)>(
          reinterpret_cast<char*>(&result_code_),
          reinterpret_cast<char*>(&other->result_code_));
  swap(trans_mode_, other->trans_mode_);
}

std::string IMFileTransferRsp::GetTypeName() const {
  return "IM.Server.IMFileTransferRsp";
}


// ===================================================================

class IMFileServerIPReq::_Internal {
 public:
};

IMFileServerIPReq::IMFileServerIPReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMFileServerIPReq)
}
IMFileServerIPReq::IMFileServerIPReq(const IMFileServerIPReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileServerIPReq)
}

inline void IMFileServerIPReq::SharedCtor() {
}

IMFileServerIPReq::~IMFileServerIPReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileServerIPReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMFileServerIPReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMFileServerIPReq::ArenaDtor(void* object) {
  IMFileServerIPReq* _this = reinterpret_cast< IMFileServerIPReq* >(object);
  (void)_this;
}
void IMFileServerIPReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFileServerIPReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMFileServerIPReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileServerIPReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* IMFileServerIPReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileServerIPReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileServerIPReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileServerIPReq)
  return target;
}

size_t IMFileServerIPReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileServerIPReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileServerIPReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFileServerIPReq*>(
      &from));
}

void IMFileServerIPReq::MergeFrom(const IMFileServerIPReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileServerIPReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileServerIPReq::CopyFrom(const IMFileServerIPReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileServerIPReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileServerIPReq::IsInitialized() const {
  return true;
}

void IMFileServerIPReq::InternalSwap(IMFileServerIPReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string IMFileServerIPReq::GetTypeName() const {
  return "IM.Server.IMFileServerIPReq";
}


// ===================================================================

class IMFileServerIPRsp::_Internal {
 public:
};

void IMFileServerIPRsp::clear_ip_addr_list() {
  ip_addr_list_.Clear();
}
IMFileServerIPRsp::IMFileServerIPRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  ip_addr_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMFileServerIPRsp)
}
IMFileServerIPRsp::IMFileServerIPRsp(const IMFileServerIPRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      ip_addr_list_(from.ip_addr_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileServerIPRsp)
}

inline void IMFileServerIPRsp::SharedCtor() {
}

IMFileServerIPRsp::~IMFileServerIPRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileServerIPRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMFileServerIPRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMFileServerIPRsp::ArenaDtor(void* object) {
  IMFileServerIPRsp* _this = reinterpret_cast< IMFileServerIPRsp* >(object);
  (void)_this;
}
void IMFileServerIPRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFileServerIPRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMFileServerIPRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileServerIPRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_list_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileServerIPRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ip_addr_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileServerIPRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileServerIPRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ip_addr_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ip_addr_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileServerIPRsp)
  return target;
}

size_t IMFileServerIPRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileServerIPRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
  total_size += 1UL * this->_internal_ip_addr_list_size();
  for (const auto& msg : this->ip_addr_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileServerIPRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFileServerIPRsp*>(
      &from));
}

void IMFileServerIPRsp::MergeFrom(const IMFileServerIPRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileServerIPRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ip_addr_list_.MergeFrom(from.ip_addr_list_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileServerIPRsp::CopyFrom(const IMFileServerIPRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileServerIPRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileServerIPRsp::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ip_addr_list_))
    return false;
  return true;
}

void IMFileServerIPRsp::InternalSwap(IMFileServerIPRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ip_addr_list_.InternalSwap(&other->ip_addr_list_);
}

std::string IMFileServerIPRsp::GetTypeName() const {
  return "IM.Server.IMFileServerIPRsp";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Server
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::Server::IMStopReceivePacket* Arena::CreateMaybeMessage< ::IM::Server::IMStopReceivePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMStopReceivePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMValidateReq* Arena::CreateMaybeMessage< ::IM::Server::IMValidateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMValidateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMValidateRsp* Arena::CreateMaybeMessage< ::IM::Server::IMValidateRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMValidateRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMGetDeviceTokenReq* Arena::CreateMaybeMessage< ::IM::Server::IMGetDeviceTokenReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMGetDeviceTokenReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMGetDeviceTokenRsp* Arena::CreateMaybeMessage< ::IM::Server::IMGetDeviceTokenRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMGetDeviceTokenRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMRoleSet* Arena::CreateMaybeMessage< ::IM::Server::IMRoleSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMRoleSet >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMOnlineUserInfo* Arena::CreateMaybeMessage< ::IM::Server::IMOnlineUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMOnlineUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMMsgServInfo* Arena::CreateMaybeMessage< ::IM::Server::IMMsgServInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMMsgServInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMUserStatusUpdate* Arena::CreateMaybeMessage< ::IM::Server::IMUserStatusUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMUserStatusUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMUserCntUpdate* Arena::CreateMaybeMessage< ::IM::Server::IMUserCntUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMUserCntUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMServerKickUser* Arena::CreateMaybeMessage< ::IM::Server::IMServerKickUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMServerKickUser >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMServerPCLoginStatusNotify* Arena::CreateMaybeMessage< ::IM::Server::IMServerPCLoginStatusNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMServerPCLoginStatusNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMPushToUserReq* Arena::CreateMaybeMessage< ::IM::Server::IMPushToUserReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMPushToUserReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMPushToUserRsp* Arena::CreateMaybeMessage< ::IM::Server::IMPushToUserRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMPushToUserRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMGroupGetShieldReq* Arena::CreateMaybeMessage< ::IM::Server::IMGroupGetShieldReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMGroupGetShieldReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMGroupGetShieldRsp* Arena::CreateMaybeMessage< ::IM::Server::IMGroupGetShieldRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMGroupGetShieldRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMFileTransferReq* Arena::CreateMaybeMessage< ::IM::Server::IMFileTransferReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMFileTransferReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMFileTransferRsp* Arena::CreateMaybeMessage< ::IM::Server::IMFileTransferRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMFileTransferRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMFileServerIPReq* Arena::CreateMaybeMessage< ::IM::Server::IMFileServerIPReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMFileServerIPReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMFileServerIPRsp* Arena::CreateMaybeMessage< ::IM::Server::IMFileServerIPRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMFileServerIPRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
